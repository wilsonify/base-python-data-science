/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Recall_input.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Recall_input::Recall_input()
{
    m_Tp = 0.0;
    m_TpIsSet = false;
    m_Fp = 0.0;
    m_FpIsSet = false;
    m_Fn = 0.0;
    m_FnIsSet = false;
    m_Tn = 0.0;
    m_TnIsSet = false;
    
}

void Recall_input::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Recall_input::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Recall_input::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Recall_input" : pathPrefix;

                    
    return success;
}

bool Recall_input::operator==(const Recall_input& rhs) const
{
    return
    
    
    
    ((!tpIsSet() && !rhs.tpIsSet()) || (tpIsSet() && rhs.tpIsSet() && getTp() == rhs.getTp())) &&
    
    
    ((!fpIsSet() && !rhs.fpIsSet()) || (fpIsSet() && rhs.fpIsSet() && getFp() == rhs.getFp())) &&
    
    
    ((!fnIsSet() && !rhs.fnIsSet()) || (fnIsSet() && rhs.fnIsSet() && getFn() == rhs.getFn())) &&
    
    
    ((!tnIsSet() && !rhs.tnIsSet()) || (tnIsSet() && rhs.tnIsSet() && getTn() == rhs.getTn()))
    
    ;
}

bool Recall_input::operator!=(const Recall_input& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Recall_input& o)
{
    j = nlohmann::json();
    if(o.tpIsSet())
        j["tp"] = o.m_Tp;
    if(o.fpIsSet())
        j["fp"] = o.m_Fp;
    if(o.fnIsSet())
        j["fn"] = o.m_Fn;
    if(o.tnIsSet())
        j["tn"] = o.m_Tn;
    
}

void from_json(const nlohmann::json& j, Recall_input& o)
{
    if(j.find("tp") != j.end())
    {
        j.at("tp").get_to(o.m_Tp);
        o.m_TpIsSet = true;
    } 
    if(j.find("fp") != j.end())
    {
        j.at("fp").get_to(o.m_Fp);
        o.m_FpIsSet = true;
    } 
    if(j.find("fn") != j.end())
    {
        j.at("fn").get_to(o.m_Fn);
        o.m_FnIsSet = true;
    } 
    if(j.find("tn") != j.end())
    {
        j.at("tn").get_to(o.m_Tn);
        o.m_TnIsSet = true;
    } 
    
}

double Recall_input::getTp() const
{
    return m_Tp;
}
void Recall_input::setTp(double const value)
{
    m_Tp = value;
    m_TpIsSet = true;
}
bool Recall_input::tpIsSet() const
{
    return m_TpIsSet;
}
void Recall_input::unsetTp()
{
    m_TpIsSet = false;
}
double Recall_input::getFp() const
{
    return m_Fp;
}
void Recall_input::setFp(double const value)
{
    m_Fp = value;
    m_FpIsSet = true;
}
bool Recall_input::fpIsSet() const
{
    return m_FpIsSet;
}
void Recall_input::unsetFp()
{
    m_FpIsSet = false;
}
double Recall_input::getFn() const
{
    return m_Fn;
}
void Recall_input::setFn(double const value)
{
    m_Fn = value;
    m_FnIsSet = true;
}
bool Recall_input::fnIsSet() const
{
    return m_FnIsSet;
}
void Recall_input::unsetFn()
{
    m_FnIsSet = false;
}
double Recall_input::getTn() const
{
    return m_Tn;
}
void Recall_input::setTn(double const value)
{
    m_Tn = value;
    m_TnIsSet = true;
}
bool Recall_input::tnIsSet() const
{
    return m_TnIsSet;
}
void Recall_input::unsetTn()
{
    m_TnIsSet = false;
}


} // namespace org::openapitools::server::model

