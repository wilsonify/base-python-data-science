/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Matrix_add_input.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Matrix_add_input::Matrix_add_input()
{
    m_Mat1IsSet = false;
    m_Mat2IsSet = false;
    
}

void Matrix_add_input::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Matrix_add_input::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Matrix_add_input::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Matrix_add_input" : pathPrefix;

         
    if (mat1IsSet())
    {
        const std::vector<std::vector<double>>& value = m_Mat1;
        const std::string currentValuePath = _pathPrefix + ".mat1";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::vector<double>& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }
 
                i++;
            }
        }

    }
         
    if (mat2IsSet())
    {
        const std::vector<std::vector<double>>& value = m_Mat2;
        const std::string currentValuePath = _pathPrefix + ".mat2";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::vector<double>& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool Matrix_add_input::operator==(const Matrix_add_input& rhs) const
{
    return
    
    
    
    ((!mat1IsSet() && !rhs.mat1IsSet()) || (mat1IsSet() && rhs.mat1IsSet() && getMat1() == rhs.getMat1())) &&
    
    
    ((!mat2IsSet() && !rhs.mat2IsSet()) || (mat2IsSet() && rhs.mat2IsSet() && getMat2() == rhs.getMat2()))
    
    ;
}

bool Matrix_add_input::operator!=(const Matrix_add_input& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Matrix_add_input& o)
{
    j = nlohmann::json();
    if(o.mat1IsSet() || !o.m_Mat1.empty())
        j["mat1"] = o.m_Mat1;
    if(o.mat2IsSet() || !o.m_Mat2.empty())
        j["mat2"] = o.m_Mat2;
    
}

void from_json(const nlohmann::json& j, Matrix_add_input& o)
{
    if(j.find("mat1") != j.end())
    {
        j.at("mat1").get_to(o.m_Mat1);
        o.m_Mat1IsSet = true;
    } 
    if(j.find("mat2") != j.end())
    {
        j.at("mat2").get_to(o.m_Mat2);
        o.m_Mat2IsSet = true;
    } 
    
}

std::vector<std::vector<double>> Matrix_add_input::getMat1() const
{
    return m_Mat1;
}
void Matrix_add_input::setMat1(std::vector<std::vector<double>> const& value)
{
    m_Mat1 = value;
    m_Mat1IsSet = true;
}
bool Matrix_add_input::mat1IsSet() const
{
    return m_Mat1IsSet;
}
void Matrix_add_input::unsetMat1()
{
    m_Mat1IsSet = false;
}
std::vector<std::vector<double>> Matrix_add_input::getMat2() const
{
    return m_Mat2;
}
void Matrix_add_input::setMat2(std::vector<std::vector<double>> const& value)
{
    m_Mat2 = value;
    m_Mat2IsSet = true;
}
bool Matrix_add_input::mat2IsSet() const
{
    return m_Mat2IsSet;
}
void Matrix_add_input::unsetMat2()
{
    m_Mat2IsSet = false;
}


} // namespace org::openapitools::server::model

