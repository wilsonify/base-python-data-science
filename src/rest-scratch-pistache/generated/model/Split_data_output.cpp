/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Split_data_output.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Split_data_output::Split_data_output()
{
    m_TrainIsSet = false;
    m_TestIsSet = false;
    
}

void Split_data_output::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Split_data_output::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Split_data_output::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Split_data_output" : pathPrefix;

         
    if (trainIsSet())
    {
        const std::vector<std::vector<double>>& value = m_Train;
        const std::string currentValuePath = _pathPrefix + ".train";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::vector<double>& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }
 
                i++;
            }
        }

    }
         
    if (testIsSet())
    {
        const std::vector<std::vector<double>>& value = m_Test;
        const std::string currentValuePath = _pathPrefix + ".test";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::vector<double>& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const double& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }
 
                i++;
            }
        }

    }
    
    return success;
}

bool Split_data_output::operator==(const Split_data_output& rhs) const
{
    return
    
    
    
    ((!trainIsSet() && !rhs.trainIsSet()) || (trainIsSet() && rhs.trainIsSet() && getTrain() == rhs.getTrain())) &&
    
    
    ((!testIsSet() && !rhs.testIsSet()) || (testIsSet() && rhs.testIsSet() && getTest() == rhs.getTest()))
    
    ;
}

bool Split_data_output::operator!=(const Split_data_output& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Split_data_output& o)
{
    j = nlohmann::json();
    if(o.trainIsSet() || !o.m_Train.empty())
        j["train"] = o.m_Train;
    if(o.testIsSet() || !o.m_Test.empty())
        j["test"] = o.m_Test;
    
}

void from_json(const nlohmann::json& j, Split_data_output& o)
{
    if(j.find("train") != j.end())
    {
        j.at("train").get_to(o.m_Train);
        o.m_TrainIsSet = true;
    } 
    if(j.find("test") != j.end())
    {
        j.at("test").get_to(o.m_Test);
        o.m_TestIsSet = true;
    } 
    
}

std::vector<std::vector<double>> Split_data_output::getTrain() const
{
    return m_Train;
}
void Split_data_output::setTrain(std::vector<std::vector<double>> const& value)
{
    m_Train = value;
    m_TrainIsSet = true;
}
bool Split_data_output::trainIsSet() const
{
    return m_TrainIsSet;
}
void Split_data_output::unsetTrain()
{
    m_TrainIsSet = false;
}
std::vector<std::vector<double>> Split_data_output::getTest() const
{
    return m_Test;
}
void Split_data_output::setTest(std::vector<std::vector<double>> const& value)
{
    m_Test = value;
    m_TestIsSet = true;
}
bool Split_data_output::testIsSet() const
{
    return m_TestIsSet;
}
void Split_data_output::unsetTest()
{
    m_TestIsSet = false;
}


} // namespace org::openapitools::server::model

