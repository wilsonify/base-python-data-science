/**
* Minimal Pistache
* This is a sample server
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Bucketize_input.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Bucketize_input::Bucketize_input()
{
    m_Point = 0.0;
    m_PointIsSet = false;
    m_Bucket_size = 0.0;
    m_Bucket_sizeIsSet = false;
    
}

void Bucketize_input::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Bucketize_input::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Bucketize_input::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Bucketize_input" : pathPrefix;

            
    return success;
}

bool Bucketize_input::operator==(const Bucketize_input& rhs) const
{
    return
    
    
    
    ((!pointIsSet() && !rhs.pointIsSet()) || (pointIsSet() && rhs.pointIsSet() && getPoint() == rhs.getPoint())) &&
    
    
    ((!bucketSizeIsSet() && !rhs.bucketSizeIsSet()) || (bucketSizeIsSet() && rhs.bucketSizeIsSet() && getBucketSize() == rhs.getBucketSize()))
    
    ;
}

bool Bucketize_input::operator!=(const Bucketize_input& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Bucketize_input& o)
{
    j = nlohmann::json();
    if(o.pointIsSet())
        j["point"] = o.m_Point;
    if(o.bucketSizeIsSet())
        j["bucket_size"] = o.m_Bucket_size;
    
}

void from_json(const nlohmann::json& j, Bucketize_input& o)
{
    if(j.find("point") != j.end())
    {
        j.at("point").get_to(o.m_Point);
        o.m_PointIsSet = true;
    } 
    if(j.find("bucket_size") != j.end())
    {
        j.at("bucket_size").get_to(o.m_Bucket_size);
        o.m_Bucket_sizeIsSet = true;
    } 
    
}

double Bucketize_input::getPoint() const
{
    return m_Point;
}
void Bucketize_input::setPoint(double const value)
{
    m_Point = value;
    m_PointIsSet = true;
}
bool Bucketize_input::pointIsSet() const
{
    return m_PointIsSet;
}
void Bucketize_input::unsetPoint()
{
    m_PointIsSet = false;
}
double Bucketize_input::getBucketSize() const
{
    return m_Bucket_size;
}
void Bucketize_input::setBucketSize(double const value)
{
    m_Bucket_size = value;
    m_Bucket_sizeIsSet = true;
}
bool Bucketize_input::bucketSizeIsSet() const
{
    return m_Bucket_sizeIsSet;
}
void Bucketize_input::unsetBucket_size()
{
    m_Bucket_sizeIsSet = false;
}


} // namespace org::openapitools::server::model

