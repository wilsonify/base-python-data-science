# Rust API for openapi_client
#
#This is a sample server Petstore server.
# You can find out more about
# Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
# For this sample, you can use the api key `special-key` to test the authorization     filters.
## Overview
#This client/server was generated by the [openapi-generator]
#(https://openapi-generator.tech) project.  By using the
#[OpenAPI-Spec](https://github.com/OAI/OpenAPI-Specification) from a remote
#server, you can easily generate a server stub.
#To see how to make this your own, look here:
#[README]((https://openapi-generator.tech))
#- API version: 1.0.0
#- Build date: 2022-10-29T19:01:34.565657Z[Etc/UTC]

# This autogenerated project defines an API crate `openapi_client` which contains:
# * An `Api` trait defining the API in Rust.
# * Data types representing the underlying data model.
# * A `Client` type which implements `Api` and issues HTTP requests for each operation.
# * A router which accepts HTTP requests and invokes the appropriate `Api` method for each operation.

# It also contains an example server and client which make use of `openapi_client`:

# * The example server starts up a web server using the `openapi_client` router,
# and supplies a trivial implementation of `Api` which returns failure for every operation.
# * The example client provides a CLI which lets you invoke any single operation on the `openapi_client`
# client by passing appropriate arguments on the command line.

# You can use the example server and client as a basis for your own code.
# See below for [more detail on implementing a server](#writing-a-server).
## Examples

examples: ### Run examples
	cargo run --example <example-name>

examples-with-arguments: ### To pass in arguments to the examples, put them after `--`, for example:
	cargo run --example client -- --help

run: ### Running the example server
	cargo run --example server

client: ###  Running the example clients
	cargo run --example client Accuracy
	cargo run --example client Bucketize
	cargo run --example client Correlation
	cargo run --example client CorrelationMatrix
	cargo run --example client Covariance
	cargo run --example client DataRange
	cargo run --example client DeMean
	cargo run --example client DifferenceQuotient
	cargo run --example client Distance
	cargo run --example client Dot
	cargo run --example client Echo
	cargo run --example client EstimateGradient
	cargo run --example client F1Score
	cargo run --example client GetColumn
	cargo run --example client GetRow
	cargo run --example client InRandomOrder
	cargo run --example client InterquartileRange
	cargo run --example client Magnitude
	cargo run --example client MatrixAdd
	cargo run --example client MaximizeBatch
	cargo run --example client MaximizeStochastic
	cargo run --example client Mean
	cargo run --example client Median
	cargo run --example client MinimizeBatch
	cargo run --example client MinimizeStochastic
	cargo run --example client Mode
	cargo run --example client PartialDifferenceQuotient
	cargo run --example client Precision
	cargo run --example client Quantile
	cargo run --example client Recall
	cargo run --example client ScalarMultiply
	cargo run --example client Shape
	cargo run --example client SplitData
	cargo run --example client Sqrt
	cargo run --example client SquaredDistance
	cargo run --example client StandardDeviation
	cargo run --example client Strength
	cargo run --example client SumOfSquares
	cargo run --example client TrainTestSplit
	cargo run --example client Variance
	cargo run --example client VectorAdd
	cargo run --example client VectorMean
	cargo run --example client VectorSubtract
	cargo run --example client VectorSum
	cargo run --example client DeletePet
	cargo run --example client FindPetsByStatus
	cargo run --example client FindPetsByTags
	cargo run --example client GetPetById
	cargo run --example client UpdatePetWithForm
	cargo run --example client UploadFile
	cargo run --example client DeleteOrder
	cargo run --example client GetInventory
	cargo run --example client GetOrderById
	cargo run --example client CreateUsersWithArrayInput
	cargo run --example client CreateUsersWithListInput
	cargo run --example client DeleteUser
	cargo run --example client GetUserByName
	cargo run --example client LoginUser
	cargo run --example client LogoutUser


run-https: ### HTTPS # The examples can be run in HTTPS mode by passing in the flag `--https`, for example:
	cargo run --example server -- --https

# This will use the keys/certificates from the examples directory. Note that the
# server chain is signed with `CN=localhost`.
## Using the generated library
# The generated library has a few optional features that can be activated through Cargo.
# * `server`
#    * This defaults to enabled and creates the basic skeleton of a server implementation based on hyper
#    * To create the server stack you'll need to provide an implementation of the API trait to provide the server function.
# * `client`
#    * This defaults to enabled and creates the basic skeleton of a client implementation based on hyper
#    * The constructed client implements the API trait by making remote API call.
# * `conversions`
#    * This defaults to disabled and creates extra derives on models to allow "transmogrification" between objects of structurally similar types.

# See https://doc.rust-lang.org/cargo/reference/manifest.html#the-features-section
# for how to use features in your `Cargo.toml`.
